#include <bits/stdc++.h>
#include <atcoder/lazysegtree>

using namespace std;
using namespace atcoder;

const int inf = 1e9;

using S = int;
using F = int;

S op(S l, S r) { return min(l, r); }

S e() { return inf; }

S mapping(F l, S r) { return min(l, r); }

F composition(F l, F r) { return min(l, r); }

F id() { return inf; }

int main() {
    int h, w, n;
    cin >> h >> w >> n;
    vector<int> r(n), c(n), l(n);
    for (int i = 0; i < n; i++) {
        cin >> r[i] >> c[i] >> l[i];
        --c[i];
    }
    vector<int> ord(n);
    iota(ord.begin(), ord.end(), 0);
    sort(ord.begin(), ord.end(), [&](int i, int j) { return r[i] > r[j]; });

    vector<int> ans(n);
    lazy_segtree<S, op, e, F, mapping, composition, id> seg(vector<int>(w, h + 1));
    for (int i: ord) {
        ans[i] = seg.prod(c[i], c[i] + l[i]) - 1;
        seg.apply(c[i], c[i] + l[i], ans[i]);
    }
    for (int i = 0; i < n; i++) {
        cout << ans[i] << '\n';
    }
}
